generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String          @id @default(cuid())
  name                        String?
  username                    String?         @unique
  preferredName               String?
  pronouns                    String?
  email                       String?         @unique
  password                    String?
  emailVerified               DateTime?
  emailVerificationToken      String?         
  emailVerificationTokenExpiry DateTime?
  image                       String?
  locale                      String?         @default("en-US")
  timezone                    String?         @default("UTC")
  role                        Role            @default(STUDENT)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  facebookId                  String?         @unique
  accounts                    Account[]
  progress                    Progress[]
  quizzes                     Quiz[]
  sessions                    Session[]
  generatedQuizzes            GeneratedQuiz[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        String     @id @default(cuid())
  userId    String
  topic     String
  score     Int
  createdAt DateTime   @default(now())
  questions Question[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id           String   @id @default(cuid())
  quizId       String
  question     String
  options      Json?
  answer       String
  userAnswer   String?
  isCorrect    Boolean?
  gameId       String
  questionType String
  game         Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  topic       String
  completed   Boolean   @default(false)
  lastStudied DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExamStructure {
  id         String   @id @default(cuid())
  subject    String   @default("mathematics")
  difficulty String[] @default(["Easy", "Medium", "Hard"])
  levels     String[] @default(["Higher Level", "Ordinary Level", "Foundation Level"])
  papers     Paper[]
}

model Paper {
  id              String        @id @default(cuid())
  name            String
  sections        String[]      @default(["Short Questions", "Long Questions"])
  topics          String[]
  examStructureId String
  exam            ExamStructure @relation(fields: [examStructureId], references: [id], onDelete: Cascade)
}

model Game {
  id          String     @id @default(uuid())
  gameType    String
  timeStarted DateTime   @default(now())
  topic       String
  questions   Question[]
}

model GeneratedQuiz {
  id          String              @id @default(cuid())
  title       String?
  description String?
  subject     String
  level       String
  difficulty  String              @default("Random")
  paper       String?
  section     String?
  topic       String?
  subtopic    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  isPublic    Boolean             @default(true)
  userId      String?
  user        User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  questions   GeneratedQuestion[]
}

model GeneratedQuestion {
  id       String        @id @default(cuid())
  question String        @db.Text
  solution String        @db.Text
  metadata Json?
  quizId   String
  quiz     GeneratedQuiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  TEACHER
}
